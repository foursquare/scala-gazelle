{
    "source": "testdata/parser_integration/fsqio/TrivialORMQueryTest.scala",
    "imports": [
        "com.mongodb.ErrorCategory",
        "com.mongodb.MongoBulkWriteException",
        "com.mongodb.MongoCommandException",
        "com.mongodb.MongoWriteException",
        "com.mongodb.WriteConcern",
        "com.mongodb.bulk.BulkWriteResult",
        "com.mongodb.bulk.BulkWriteUpsert",
        "com.mongodb.client.MongoCollection",
        "com.mongodb.client.MongoDatabase",
        "com.mongodb.client.model.CountOptions",
        "com.mongodb.reactivestreams.client.MongoCollection",
        "com.twitter.util.Await",
        "com.twitter.util.Duration",
        "com.twitter.util.Future",
        "io.fsq.common.concurrent.Futures",
        "io.fsq.common.scala.Lists.Implicits._",
        "io.fsq.field.OptionalField",
        "io.fsq.field.RequiredField",
        "io.fsq.rogue.BulkInsertOne",
        "io.fsq.rogue.BulkRemove",
        "io.fsq.rogue.BulkRemoveOne",
        "io.fsq.rogue.BulkReplaceOne",
        "io.fsq.rogue.BulkUpdateMany",
        "io.fsq.rogue.BulkUpdateOne",
        "io.fsq.rogue.InitialState",
        "io.fsq.rogue.Iter",
        "io.fsq.rogue.MongoHelpers.AndCondition",
        "io.fsq.rogue.Query",
        "io.fsq.rogue.QueryOptimizer",
        "io.fsq.rogue.Rogue",
        "io.fsq.rogue.RogueException",
        "io.fsq.rogue.adapter.BlockingMongoClientAdapter",
        "io.fsq.rogue.adapter.BlockingResult",
        "io.fsq.rogue.adapter.twitter.AsyncMongoClientAdapter",
        "io.fsq.rogue.adapter.twitter.TwitterAsyncUtil",
        "io.fsq.rogue.connection.MongoIdentifier",
        "io.fsq.rogue.connection.testlib.RogueMongoTest",
        "io.fsq.rogue.index.Asc",
        "io.fsq.rogue.index.Desc",
        "io.fsq.rogue.index.MongoIndex",
        "io.fsq.rogue.query.QueryExecutor",
        "io.fsq.rogue.query.testlib.TrivialORMMetaRecord",
        "io.fsq.rogue.query.testlib.TrivialORMMongoCollectionFactory",
        "io.fsq.rogue.query.testlib.TrivialORMRecord",
        "io.fsq.rogue.query.testlib.TrivialORMRogueSerializer",
        "io.fsq.rogue.util.DefaultQueryLogger",
        "io.fsq.rogue.util.DefaultQueryUtilities",
        "io.fsq.rogue.util.QueryLogger",
        "java.util.ArrayList",
        "java.util.List",
        "java.util.concurrent.CyclicBarrier",
        "java.util.concurrent.TimeUnit",
        "org.bson.BsonObjectId",
        "org.bson.Document",
        "org.bson.conversions.Bson",
        "org.bson.types.ObjectId",
        "org.junit.Assert",
        "org.junit.Before",
        "org.junit.Test",
        "org.specs2.matcher.JUnitMustMatchers",
        "org.specs2.matcher.MatchersImplicits",
        "scala.collection.JavaConverters._",
        "scala.math.min"
    ],
    "package": "io.fsq.rogue.query.test",
    "fully_qualified_names": [
        "Assert.assertEquals",
        "Await.result",
        "BlockingResult.Implicits",
        "BulkWriteResult.acknowledged",
        "Duration.fromSeconds",
        "Future.Unit",
        "Future.join",
        "Futures.groupedCollect",
        "Iter.Continue",
        "Iter.OnError",
        "Iter.OnNext",
        "Iter.Return",
        "OptionalIdRecord.toDocument",
        "Seq.empty",
        "Seq.tabulate",
        "SerializeUtil.nestedFieldValueFromDocument",
        "SerializeUtil.nestedFieldValueToDocument",
        "SimpleRecord.mongoIdentifier",
        "SimpleRecord.orderAsc",
        "SimpleRecord.orderDesc",
        "SimpleRecord.select",
        "SimpleRecord.where",
        "TimeUnit.SECONDS",
        "TrivialORMQueryTest.Implicits",
        "TrivialORMQueryTest.dbName",
        "TwitterAsyncUtil.seqResult",
        "Vector.newBuilder",
        "accumulator.result",
        "asyncClientManager.defineDb",
        "asyncCollectionFactory.getMongoCollectionFromMetaRecord",
        "asyncQueryExecutor.count",
        "asyncQueryExecutor.createIndexes",
        "asyncQueryExecutor.explain",
        "asyncQueryExecutor.fetch",
        "asyncQueryExecutor.fetchOne",
        "asyncQueryExecutor.insert",
        "asyncQueryExecutor.insertAll",
        "asyncQueryExecutor.save",
        "barrier.await",
        "blockingClientAdapter.parseShardKeyValue",
        "blockingClientManager.defineDb",
        "blockingCollectionFactory.getMongoCollectionFromMetaRecord",
        "blockingQueryExecutor.bulk",
        "blockingQueryExecutor.createIndexes",
        "blockingQueryExecutor.findAndUpdateOne",
        "blockingQueryExecutor.findAndUpsertOne",
        "blockingQueryExecutor.foreach",
        "blockingQueryExecutor.insert",
        "blockingQueryExecutor.insertAll",
        "blockingQueryExecutor.remove",
        "blockingQueryExecutor.save",
        "blockingQueryExecutor.updateMany",
        "blockingQueryExecutor.updateOne",
        "blockingQueryExecutor.upsertOne",
        "boolean.name",
        "coll.listIndexes",
        "document.append",
        "document.getObjectId",
        "document.getString",
        "double.name",
        "duplicateTestFutures.flatMap",
        "emptyInsertFuture.flatMap",
        "emptyRecord.id",
        "executor.save",
        "extraRecord.id",
        "extraRecord.int",
        "filteredRecords.size",
        "filteredRecords.take",
        "fullRecord1.copy",
        "fullRecord2.copy",
        "id.name",
        "indexMap.getOrElse",
        "insertFuture.flatMap",
        "insertFutures.flatMap",
        "inserted.filter",
        "inserted.head",
        "inserted.head.id",
        "inserted.last",
        "inserted.map",
        "insertedFuture.flatMap",
        "int.name",
        "listedIndexes.toMapByKey",
        "long.name",
        "map.name",
        "matched.sortBy",
        "mbwe.getWriteErrors.asScala.map",
        "mce.getErrorCode",
        "meta.collectionName",
        "mwe.getError.getCategory",
        "nestedMap.name",
        "nestedMapValue.foreach",
        "newMatched.size",
        "record.boolean.foreach",
        "record.double.foreach",
        "record.id",
        "record.id.foreach",
        "record.int.foreach",
        "record.long.foreach",
        "record.map.foreach",
        "record.nestedMap.foreach",
        "record.string.foreach",
        "record.vector.foreach",
        "records.headOption.flatMap",
        "records.map",
        "records.size",
        "replacement.int",
        "results.map",
        "results.size",
        "returnNewTestRecord.copy",
        "returnNewTestRecord.string.map",
        "rogueException.getCause",
        "serialTestFutures.flatMap",
        "string.name",
        "testAsyncQueryExecutor.count",
        "testBlockingQueryExecutor.count",
        "testFutures.flatMap",
        "testQueryExecutor.count",
        "testRecord.copy",
        "testRecord.id",
        "testRecord.int",
        "testRecord.int.map",
        "testRecords.filter",
        "testRecords.head.id",
        "testRecords.map",
        "testRecords.reverse",
        "vector.name",
        "vectorVal.asJava"
    ],
    "symbols": [
        "OptionalIdRecord",
        "OptionalIdRecord.collectionName",
        "OptionalIdRecord.fromDocument",
        "OptionalIdRecord.id",
        "OptionalIdRecord.int",
        "OptionalIdRecord.mongoIdentifier",
        "OptionalIdRecord.nestedMap",
        "OptionalIdRecord.toDocument",
        "OptionalNestedIdRecord",
        "OptionalNestedIdRecord.collectionName",
        "OptionalNestedIdRecord.fromDocument",
        "OptionalNestedIdRecord.id",
        "OptionalNestedIdRecord.int",
        "OptionalNestedIdRecord.mongoIdentifier",
        "OptionalNestedIdRecord.toDocument",
        "SerializeUtil",
        "SerializeUtil.nestedFieldValueFromDocument",
        "SerializeUtil.nestedFieldValueToDocument",
        "SimpleRecord",
        "SimpleRecord.boolean",
        "SimpleRecord.collectionName",
        "SimpleRecord.double",
        "SimpleRecord.fromDocument",
        "SimpleRecord.id",
        "SimpleRecord.int",
        "SimpleRecord.long",
        "SimpleRecord.map",
        "SimpleRecord.mongoIdentifier",
        "SimpleRecord.string",
        "SimpleRecord.toDocument",
        "SimpleRecord.vector",
        "TrivialORMQueryTest",
        "TrivialORMQueryTest.Implicits",
        "TrivialORMQueryTest.dbName"
    ]
}
